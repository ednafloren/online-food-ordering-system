{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\React_Todo_APP\\\\to-do\\\\src\\\\components\\\\ToDo.jsx\";\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToDo = _ref => {\n  let {\n    toDo,\n    markDone,\n    setUpdateData,\n    deleteTask\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: toDo && toDo.sort((a, b) => a.id > b.id ? 1 : -1).map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col taskBg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: task.status ? 'done' : '',\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskNumber\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskText\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iconsWrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"check\",\n              title: \"completed / Not completed\",\n              onClick: e => markDone(task.id),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCircleCheck\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 25\n            }, this), task.status ? null : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"edit\",\n              title: \"Edit\",\n              onClick: () => setUpdateData({\n                id: task.id,\n                title: task.title,\n                status: task.status ? true : false\n              }),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faPen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delete\",\n              title: \"Delete\",\n              onClick: () => deleteTask(task.id),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faTrashCan\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false);\n};\n_c = ToDo;\nexport default ToDo;\nvar _c;\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"names":["React","FontAwesomeIcon","faCircleCheck","faPen","faTrashCan","ToDo","toDo","markDone","setUpdateData","deleteTask","sort","a","b","id","map","task","index","status","title","e"],"sources":["C:/Users/Dell/Desktop/React_Todo_APP/to-do/src/components/ToDo.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst ToDo = ({ toDo, markDone, setUpdateData, deleteTask }) => {\r\n    return(\r\n        <>\r\n            {toDo && toDo\r\n                .sort((a,b)=> a.id > b.id ? 1 : -1)\r\n                .map((task, index ) => {\r\n                return(\r\n                    <React.Fragment key={task.id}>\r\n                    <div className='col taskBg'>\r\n                        <div className={task.status ? 'done' : ''}>\r\n                        <span className='taskNumber'>{index + 1}</span>\r\n                        <span className='taskText'>{task.title}</span>\r\n                        </div>\r\n                        <div className='iconsWrap'>\r\n                        <span className='check' title='completed / Not completed' onClick={(e)=> markDone(task.id)}>\r\n                            <FontAwesomeIcon icon={faCircleCheck}></FontAwesomeIcon>\r\n                        </span>\r\n        \r\n                        {task.status ? null : (\r\n                            <span className='edit' title='Edit' onClick={()=> setUpdateData({\r\n                            id: task.id,\r\n                            title: task.title,\r\n                            status: task.status ? true : false\r\n                            })}>\r\n                            <FontAwesomeIcon icon={faPen}></FontAwesomeIcon>\r\n                            </span>\r\n                        )}\r\n        \r\n                        <span className='delete' title='Delete' onClick={()=> deleteTask(task.id)}>\r\n                            <FontAwesomeIcon icon={faTrashCan}></FontAwesomeIcon>\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n                    </React.Fragment>\r\n                )\r\n                })\r\n            }\r\n        </>\r\n    \r\n    )\r\n}\r\n\r\nexport default ToDo;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,EAAEC,KAAK,EAAEC,UAAU,QAAQ,mCAAmC;AAAA;AAAA;AAEpF,MAAMC,IAAI,GAAG,QAAmD;EAAA,IAAlD;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAW,CAAC;EACvD,oBACI;IAAA,UACKH,IAAI,IAAIA,IAAI,CACRI,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAID,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAClCC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAM;MACvB,oBACI,QAAC,KAAK,CAAC,QAAQ;QAAA,uBACf;UAAK,SAAS,EAAC,YAAY;UAAA,wBACvB;YAAK,SAAS,EAAED,IAAI,CAACE,MAAM,GAAG,MAAM,GAAG,EAAG;YAAA,wBAC1C;cAAM,SAAS,EAAC,YAAY;cAAA,UAAED,KAAK,GAAG;YAAC;cAAA;cAAA;cAAA;YAAA,QAAQ,eAC/C;cAAM,SAAS,EAAC,UAAU;cAAA,UAAED,IAAI,CAACG;YAAK;cAAA;cAAA;cAAA;YAAA,QAAQ;UAAA;YAAA;YAAA;YAAA;UAAA,QACxC,eACN;YAAK,SAAS,EAAC,WAAW;YAAA,wBAC1B;cAAM,SAAS,EAAC,OAAO;cAAC,KAAK,EAAC,2BAA2B;cAAC,OAAO,EAAGC,CAAC,IAAIZ,QAAQ,CAACQ,IAAI,CAACF,EAAE,CAAE;cAAA,uBACvF,QAAC,eAAe;gBAAC,IAAI,EAAEX;cAAc;gBAAA;gBAAA;gBAAA;cAAA;YAAmB;cAAA;cAAA;cAAA;YAAA,QACrD,EAENa,IAAI,CAACE,MAAM,GAAG,IAAI,gBACf;cAAM,SAAS,EAAC,MAAM;cAAC,KAAK,EAAC,MAAM;cAAC,OAAO,EAAE,MAAKT,aAAa,CAAC;gBAChEK,EAAE,EAAEE,IAAI,CAACF,EAAE;gBACXK,KAAK,EAAEH,IAAI,CAACG,KAAK;gBACjBD,MAAM,EAAEF,IAAI,CAACE,MAAM,GAAG,IAAI,GAAG;cAC7B,CAAC,CAAE;cAAA,uBACH,QAAC,eAAe;gBAAC,IAAI,EAAEd;cAAM;gBAAA;gBAAA;gBAAA;cAAA;YAAmB;cAAA;cAAA;cAAA;YAAA,QAEnD,eAED;cAAM,SAAS,EAAC,QAAQ;cAAC,KAAK,EAAC,QAAQ;cAAC,OAAO,EAAE,MAAKM,UAAU,CAACM,IAAI,CAACF,EAAE,CAAE;cAAA,uBACtE,QAAC,eAAe;gBAAC,IAAI,EAAET;cAAW;gBAAA;gBAAA;gBAAA;cAAA;YAAmB;cAAA;cAAA;cAAA;YAAA,QAClD;UAAA;YAAA;YAAA;YAAA;UAAA,QACD;QAAA;UAAA;UAAA;UAAA;QAAA;MACJ,GAzBeW,IAAI,CAACF,EAAE;QAAA;QAAA;QAAA;MAAA,QA0BX;IAErB,CAAC;EAAC,iBAEP;AAGX,CAAC;AAAA,KAxCKR,IAAI;AA0CV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}