{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\React_Todo_APP\\\\to-do\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Tasks (ToDo List) State\n  //////////////////////////main state storing todo tasks\n  const [toDo, setToDo] = useState([{\n    id: 1,\n    title: 'Task 1',\n    status: false\n  }, {\n    id: 2,\n    title: 'Task 2',\n    status: false\n  }]);\n\n  // Temp State\n  /////////////use inputs to add new task or update\n  const [newTask, setNewTask] = useState('');\n  const [updateData, setUpdateData] = useState('');\n\n  //functions that run the app\n  // Add task \n  ///////////\n  const addTask = () => {};\n\n  // Delete task \n  //////////////\n  const deleteTask = id => {};\n\n  // Mark task as done or completed\n  /////////////////////////////////\n  const markDone = id => {};\n\n  // Cancel update\n  ////////////////\n  const cancelUpdate = () => {};\n\n  // Change task for update\n  /////////////////////////\n  const changeTask = e => {};\n\n  // Update task\n  //////////////\n  const updateTask = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container App\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"To Do list App (Reactjs)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), toDo && toDo.length ? '' : 'No Tasks...', toDo && toDo.sort((a, b) => a.id > b.id).map((task, index) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col taskBg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: task.status ? 'done' : '',\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskNumber\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskText\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iconsWrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"check\",\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCircleCheck\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"edit\",\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faPen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"delete\",\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faTrashCan\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"izSIBJPKBw8Ggq4sGaMcErT6csU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","FontAwesomeIcon","faCircleCheck","faPen","faTrashCan","App","toDo","setToDo","id","title","status","newTask","setNewTask","updateData","setUpdateData","addTask","deleteTask","markDone","cancelUpdate","changeTask","e","updateTask","length","sort","a","b","map","task","index"],"sources":["C:/Users/Dell/Desktop/React_Todo_APP/to-do/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons' \n\nimport './App.css';\n\n\nfunction App() {\n  // Tasks (ToDo List) State\n  //////////////////////////main state storing todo tasks\n  const [toDo, setToDo] = useState([\n    {id: 1, title: 'Task 1', status: false},\n    {id: 2, title: 'Task 2', status: false}\n  ])\n\n  // Temp State\n  /////////////use inputs to add new task or update\n  const [newTask, setNewTask] = useState('');\n  const [updateData, setUpdateData] = useState('');\n\n  //functions that run the app\n  // Add task \n  ///////////\n  const addTask = () => {\n  }\n\n  // Delete task \n  //////////////\n  const deleteTask = (id) => {\n    \n  }\n\n  // Mark task as done or completed\n  /////////////////////////////////\n  const markDone = (id) => {\n\n  }\n\n  // Cancel update\n  ////////////////\n  const cancelUpdate = () => {\n\n  }\n\n  // Change task for update\n  /////////////////////////\n  const changeTask = (e) => {\n\n  }\n\n  // Update task\n  //////////////\n  const updateTask = () => {\n\n  }\n\n  return (\n    <div className=\"container App\">\n      <br></br>\n      <h2>To Do list App (Reactjs)</h2>\n      <br></br> \n\n      {/* Display ToDos */}\n\n      {toDo && toDo.length ? '' : 'No Tasks...'}\n\n      {toDo && toDo.sort((a,b)=> a.id > b.id )\n        .map((task, index ) => {\n          return(\n            <React.Fragment key={task.id}>\n              <div className='col taskBg'>\n                <div className={task.status ? 'done' : ''}>\n                <span className='taskNumber'>{index + 1}</span>\n                <span className='taskText'>{task.title}</span>\n                </div>\n                <div className='iconsWrap'>\n                  <span className='check'>\n                    <FontAwesomeIcon icon={faCircleCheck}></FontAwesomeIcon>\n                  </span>\n                  <span className='edit'>\n                  <FontAwesomeIcon icon={faPen}></FontAwesomeIcon>\n                  </span>\n                  <span className='delete'>\n                    <FontAwesomeIcon icon={faTrashCan}></FontAwesomeIcon>\n                  </span>\n                </div>\n              </div>\n            </React.Fragment>\n          )\n        })\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAC7C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,aAAa,EAAEC,KAAK,EAAEC,UAAU,QAAQ,mCAAmC;AAEpF,OAAO,WAAW;AAAC;AAGnB,SAASC,GAAG,GAAG;EAAA;EACb;EACA;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAC/B;IAACQ,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAK,CAAC,EACvC;IAACF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAK,CAAC,CACxC,CAAC;;EAEF;EACA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA;EACA;EACA,MAAMe,OAAO,GAAG,MAAM,CACtB,CAAC;;EAED;EACA;EACA,MAAMC,UAAU,GAAIR,EAAE,IAAK,CAE3B,CAAC;;EAED;EACA;EACA,MAAMS,QAAQ,GAAIT,EAAE,IAAK,CAEzB,CAAC;;EAED;EACA;EACA,MAAMU,YAAY,GAAG,MAAM,CAE3B,CAAC;;EAED;EACA;EACA,MAAMC,UAAU,GAAIC,CAAC,IAAK,CAE1B,CAAC;;EAED;EACA;EACA,MAAMC,UAAU,GAAG,MAAM,CAEzB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC5B;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAA,UAAI;IAAwB;MAAA;MAAA;MAAA;IAAA,QAAK,eACjC;MAAA;MAAA;MAAA;IAAA,QAAS,EAIRf,IAAI,IAAIA,IAAI,CAACgB,MAAM,GAAG,EAAE,GAAG,aAAa,EAExChB,IAAI,IAAIA,IAAI,CAACiB,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAID,CAAC,CAAChB,EAAE,GAAGiB,CAAC,CAACjB,EAAE,CAAE,CACrCkB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAM;MACrB,oBACE,QAAC,KAAK,CAAC,QAAQ;QAAA,uBACb;UAAK,SAAS,EAAC,YAAY;UAAA,wBACzB;YAAK,SAAS,EAAED,IAAI,CAACjB,MAAM,GAAG,MAAM,GAAG,EAAG;YAAA,wBAC1C;cAAM,SAAS,EAAC,YAAY;cAAA,UAAEkB,KAAK,GAAG;YAAC;cAAA;cAAA;cAAA;YAAA,QAAQ,eAC/C;cAAM,SAAS,EAAC,UAAU;cAAA,UAAED,IAAI,CAAClB;YAAK;cAAA;cAAA;cAAA;YAAA,QAAQ;UAAA;YAAA;YAAA;YAAA;UAAA,QACxC,eACN;YAAK,SAAS,EAAC,WAAW;YAAA,wBACxB;cAAM,SAAS,EAAC,OAAO;cAAA,uBACrB,QAAC,eAAe;gBAAC,IAAI,EAAEP;cAAc;gBAAA;gBAAA;gBAAA;cAAA;YAAmB;cAAA;cAAA;cAAA;YAAA,QACnD,eACP;cAAM,SAAS,EAAC,MAAM;cAAA,uBACtB,QAAC,eAAe;gBAAC,IAAI,EAAEC;cAAM;gBAAA;gBAAA;gBAAA;cAAA;YAAmB;cAAA;cAAA;cAAA;YAAA,QACzC,eACP;cAAM,SAAS,EAAC,QAAQ;cAAA,uBACtB,QAAC,eAAe;gBAAC,IAAI,EAAEC;cAAW;gBAAA;gBAAA;gBAAA;cAAA;YAAmB;cAAA;cAAA;cAAA;YAAA,QAChD;UAAA;YAAA;YAAA;YAAA;UAAA,QACH;QAAA;UAAA;UAAA;UAAA;QAAA;MACF,GAjBauB,IAAI,CAACnB,EAAE;QAAA;QAAA;QAAA;MAAA,QAkBX;IAErB,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QAGA;AAEV;AAAC,GAvFQH,GAAG;AAAA,KAAHA,GAAG;AAyFZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}